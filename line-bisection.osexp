---
API: 2.1
OpenSesame: 3.3.5
Platform: nt
---
set width 1024
set uniform_coordinates yes
set title "New experiment"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set round_decimals 2
set height 768
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic no
set font_family mono
set font_bold no
set experiment_path "\\\\chss.datastore.ed.ac.uk\\chss\\ppls\\users\\amitch17\\GitHub\\IAPN"
set disable_garbage_collection yes
set description "The main experiment item"
set coordinates uniform
set compensation 0
set canvas_backend psycho
set background black

define form_base custom_form
	set timeout keypress
	set spacing 10
	set rows "1;1;1;1;1"
	set only_render no
	set margins "25;25;50;50"
	set cols "1;1"
	set _theme gray
	widget 0 0 2 1 label center=no text="Please enter the width and height of your computer screen in cm"
	widget 0 1 1 1 text_input center=no frame=yes return_accepts=yes stub="Type here …" var=response


define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run outside_loop always

define loop experiment_loop
	set source_file "line-bisection_stim.csv"
	set source file
	set repeat 1
	set order random
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 empty_column ""
	run line_bisection

define inline_script experiment_script
	set description "Executes Python code"
	set _run ""
	___prepare__
	## preparing for the experiment
	# taking information from file_pool and converting to memoryview
	## things that need to be defined here: line length, fix size
	
	# start-point of the line
	var.start_pix = var.pix_permmX*var.start_mm
	var.end_pix = var.pix_permmX*var.end_mm
	var.y_pix = var.pix_permmX*var.line_y_pos
	__end__

define notepad getting_started
	__note__
	Welcome to OpenSesame 3.3 "Lentiform Loewenfeld"!
	If you are new to OpenSesame, it is a good idea to follow one of the tutorials,
	which can be found on the documentation site:
	- <http://osdoc.cogsci.nl/>
	You can also check out the examples. These can be opened via:
	- Menu -> Tools -> Example experiments.
	And feel free to ask for help on the forum:
	- <http://forum.cogsci.nl/>
	Have fun with OpenSesame!
	__end__
	set description "A simple notepad to document your experiment. This plug-in does nothing."

define inline_script global_prep
	set description "Executes Python code"
	___run__
	import csv
	from datetime import datetime
	from enum import Enum
	
	from libopensesame import sketchpad_elements
	from openexp.keyboard import keyboard
	
	# packages useful for generating random arrays and selecting from them
	# handing for varying target onset time
	import random
	from random import choice
	import numpy as np
	
	m = Mouse()
	myKeys = keyboard(exp, keylist=['space'])
	
	#beep = items['beep']
	#blank = items['blank']
	
	#response items
	stim, response = items['line'], items['line_mouse_response']
	#fixation = items['fixation']
	
	def in_bounds(x,y,bounds):
		left, top, right, bottom = bounds
		return x > left and x < right and y > top and y < bottom
	
	
	# screen width & height- as defined by participant in form
	var.width_cm = 60
	var.height_cm = 35.5
	#width_px = 1080
	#height_px = 720
	
	#sizes in mm for reporting - based on resolution calculation earlier
	var.pix_permmX = width_px/(var.width_cm*10) #x resolution divided by widthx10
	var.pix_permmY = height_px/(var.height_cm*10) 
	
	# recording log file specfic to experiment
	subject_nr_string = str(var.subject_nr)
	date_str = datetime.now().isoformat()[:-7]
	#data_path = u'/home/experimenter/DMT-AD/DMT2019_rawdata/'
	#data_string = u'subject{sub}_{title}_{hand}_{date}.csv'
	#individual subject path
	#data_dir = os.path.join(data_path,subject_nr_string)
	#if not os.path.exists(data_dir):
			#os.makedirs(data_dir)
	#data_outpath = os.path.join(data_dir, data_string)
	#datafile = log.open(data_outpath.format(sub=subject_nr_string, date=date_str, title=var.title, hand=var.hand))
	
	# target onset time array
	#target_onset_values = list(np.arange(250,850,100))
	
	#manual trial counter for limiting experiment to max 50 trials
	#var.valid_trial_count = 0
	__end__
	set _prepare ""

define sketchpad line
	set duration 0
	set description "Displays stimuli"
	draw line color=white penwidth=5 show_if=always x1="[start_pix]" x2="[end_pix]" y1="[y_pix]" y2="[y_pix]" z_index=0

define sequence line_bisection
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run experiment_script always
	run line always
	run line_mouse_response always

define mouse_response line_mouse_response
	set timeout infinite
	set show_cursor yes
	set linked_sketchpad line
	set flush yes
	set event_type mouseclick
	set duration mouseclick
	set description "Collects mouse responses"
	set allowed_responses left_button

define logger logger
	set description "Logs experimental data"
	set auto_log yes

define form_multiple_choice new_form_multiple_choice
	set timeout infinite
	set spacing 10
	set question "Your question"
	__options__
	Yes
	No
	Maybe
	__end__
	set margins "50;50;50;50"
	set form_var response
	set form_title "Form title"
	set description "A simple multiple choice item"
	set button_text Ok
	set allow_multiple yes
	set advance_immediately yes
	set _theme gray

define form_text_input new_form_text_input
	set timeout infinite
	set spacing 10
	set rows "1;1;6"
	set only_render no
	set margins "50;50;50;50"
	set form_var response
	set form_title Title
	set form_question "Your question"
	set description "A simple text input form"
	set cols 1
	set _theme gray
	widget 0 0 1 1 label text="[form_title]"
	widget 0 1 1 1 label center=no text="[form_question]"
	widget 0 2 1 1 text_input focus=yes return_accepts=yes stub="" var="[form_var]"


define sketchpad new_sketchpad
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="Instruction screen" x=0 y=0 z_index=0

define loop outside_loop
	set source_file ""
	set source table
	set repeat 1
	set order random
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 empty_column ""
	run outside_sequence

define sequence outside_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run global_prep always
	run new_sketchpad always
	run screen_resolution always
	run custom_form always
	run experiment_loop always
	run logger always

define inline_script screen_resolution
	set description "Executes Python code"
	___run__
	#### ALL IMPORTANT SCREEN RESOLUTION
	#import pyautogui
	#width_px, height_px = pyautogui.size()
	__end__
	___prepare__
	#### ALL IMPORTANT SCREEN RESOLUTION
	import tkinter as tk
	
	root = tk.Tk()
	
	width_px = root.winfo_screenwidth()
	height_px = root.winfo_screenheight()
	__end__

define inline_script screen_size_form
	set description "Executes Python code"
	___run__
	def filter_digits(ch):
	
	    """Allows only digit characters as input"""
	
	    return ch in u'0123456789'
	    
	# Create a form
	form = Form(
	    cols=[1,1,1], rows=[1,1,1]
	)
	
	# Create four widgets
	labelTitle = Label(text=u'Screen size')
	labelQuestion = Label(
	    text=u'Please enter the width and height of your computer screen in cm',
	    center=False
	)
	label_width = Label(u'Screen width:')
	width_text = TextInput(stub=u'Width         …', var='width', key_filter=filter_digits
	)
	label_height = Label(u'Screen height:')
	height_text = TextInput(stub=u'Height         …', var='height', key_filter=filter_digits
	)
	# Add the widgets to the form. The position in the form is indicated as a
	# (column, row) tuple.
	form.set_widget(labelTitle, (0,0), colspan = 2)
	form.set_widget(labelQuestion, (0,1), colspan = 2)
	form.set_widget(label_width, (0,1))
	form.set_widget(label_height, (1,1))
	form.set_widget(width_text, (0,1))
	form.set_widget(height_text, (1,1))
	# Execute the form! In this case, the form will return the text of the button that
	# was clicked. This is one way to get a return value out of the form. Another way
	# is to use the 'var' keyword, supported some of the widgets.
	dimensions = form._exec()
	__end__
	set _prepare ""

define sketchpad welcome
	set start_response_interval no
	set reset_variables no
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="OpenSesame 3.3 <i>Lentiform Loewenfeld</i>" x=0 y=0 z_index=0

